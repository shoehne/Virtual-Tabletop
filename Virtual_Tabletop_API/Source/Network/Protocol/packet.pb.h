// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packet_2eproto;
namespace Virtual_Tt_Api {
class ChatMessage;
class ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class ConnectionHandling;
class ConnectionHandlingDefaultTypeInternal;
extern ConnectionHandlingDefaultTypeInternal _ConnectionHandling_default_instance_;
class FragmentPacket;
class FragmentPacketDefaultTypeInternal;
extern FragmentPacketDefaultTypeInternal _FragmentPacket_default_instance_;
class PacketHeader;
class PacketHeaderDefaultTypeInternal;
extern PacketHeaderDefaultTypeInternal _PacketHeader_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class SlicePacket;
class SlicePacketDefaultTypeInternal;
extern SlicePacketDefaultTypeInternal _SlicePacket_default_instance_;
}  // namespace Virtual_Tt_Api
PROTOBUF_NAMESPACE_OPEN
template<> ::Virtual_Tt_Api::ChatMessage* Arena::CreateMaybeMessage<::Virtual_Tt_Api::ChatMessage>(Arena*);
template<> ::Virtual_Tt_Api::ConnectionHandling* Arena::CreateMaybeMessage<::Virtual_Tt_Api::ConnectionHandling>(Arena*);
template<> ::Virtual_Tt_Api::FragmentPacket* Arena::CreateMaybeMessage<::Virtual_Tt_Api::FragmentPacket>(Arena*);
template<> ::Virtual_Tt_Api::PacketHeader* Arena::CreateMaybeMessage<::Virtual_Tt_Api::PacketHeader>(Arena*);
template<> ::Virtual_Tt_Api::Position* Arena::CreateMaybeMessage<::Virtual_Tt_Api::Position>(Arena*);
template<> ::Virtual_Tt_Api::SlicePacket* Arena::CreateMaybeMessage<::Virtual_Tt_Api::SlicePacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Virtual_Tt_Api {

// ===================================================================

class PacketHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Virtual_Tt_Api.PacketHeader) */ {
 public:
  inline PacketHeader() : PacketHeader(nullptr) {}
  virtual ~PacketHeader();

  PacketHeader(const PacketHeader& from);
  PacketHeader(PacketHeader&& from) noexcept
    : PacketHeader() {
    *this = ::std::move(from);
  }

  inline PacketHeader& operator=(const PacketHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketHeader& operator=(PacketHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PacketHeader& default_instance();

  static inline const PacketHeader* internal_default_instance() {
    return reinterpret_cast<const PacketHeader*>(
               &_PacketHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PacketHeader& a, PacketHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketHeader* New() const final {
    return CreateMaybeMessage<PacketHeader>(nullptr);
  }

  PacketHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketHeader& from);
  void MergeFrom(const PacketHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Virtual_Tt_Api.PacketHeader";
  }
  protected:
  explicit PacketHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrc32FieldNumber = 1,
    kSequenceFieldNumber = 2,
    kPacketTypeFieldNumber = 3,
  };
  // uint32 crc32 = 1;
  void clear_crc32();
  ::PROTOBUF_NAMESPACE_ID::uint32 crc32() const;
  void set_crc32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crc32() const;
  void _internal_set_crc32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sequence = 2;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 packetType = 3;
  void clear_packettype();
  ::PROTOBUF_NAMESPACE_ID::uint32 packettype() const;
  void set_packettype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packettype() const;
  void _internal_set_packettype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Virtual_Tt_Api.PacketHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crc32_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packettype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class FragmentPacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Virtual_Tt_Api.FragmentPacket) */ {
 public:
  inline FragmentPacket() : FragmentPacket(nullptr) {}
  virtual ~FragmentPacket();

  FragmentPacket(const FragmentPacket& from);
  FragmentPacket(FragmentPacket&& from) noexcept
    : FragmentPacket() {
    *this = ::std::move(from);
  }

  inline FragmentPacket& operator=(const FragmentPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline FragmentPacket& operator=(FragmentPacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FragmentPacket& default_instance();

  static inline const FragmentPacket* internal_default_instance() {
    return reinterpret_cast<const FragmentPacket*>(
               &_FragmentPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FragmentPacket& a, FragmentPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(FragmentPacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FragmentPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FragmentPacket* New() const final {
    return CreateMaybeMessage<FragmentPacket>(nullptr);
  }

  FragmentPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FragmentPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FragmentPacket& from);
  void MergeFrom(const FragmentPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FragmentPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Virtual_Tt_Api.FragmentPacket";
  }
  protected:
  explicit FragmentPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kFragmentIdFieldNumber = 2,
    kFragmentAmountFieldNumber = 3,
  };
  // .Virtual_Tt_Api.PacketHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Virtual_Tt_Api::PacketHeader& header() const;
  ::Virtual_Tt_Api::PacketHeader* release_header();
  ::Virtual_Tt_Api::PacketHeader* mutable_header();
  void set_allocated_header(::Virtual_Tt_Api::PacketHeader* header);
  private:
  const ::Virtual_Tt_Api::PacketHeader& _internal_header() const;
  ::Virtual_Tt_Api::PacketHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Virtual_Tt_Api::PacketHeader* header);
  ::Virtual_Tt_Api::PacketHeader* unsafe_arena_release_header();

  // uint32 fragmentId = 2;
  void clear_fragmentid();
  ::PROTOBUF_NAMESPACE_ID::uint32 fragmentid() const;
  void set_fragmentid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fragmentid() const;
  void _internal_set_fragmentid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fragmentAmount = 3;
  void clear_fragmentamount();
  ::PROTOBUF_NAMESPACE_ID::uint32 fragmentamount() const;
  void set_fragmentamount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fragmentamount() const;
  void _internal_set_fragmentamount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Virtual_Tt_Api.FragmentPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Virtual_Tt_Api::PacketHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fragmentid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fragmentamount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class SlicePacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Virtual_Tt_Api.SlicePacket) */ {
 public:
  inline SlicePacket() : SlicePacket(nullptr) {}
  virtual ~SlicePacket();

  SlicePacket(const SlicePacket& from);
  SlicePacket(SlicePacket&& from) noexcept
    : SlicePacket() {
    *this = ::std::move(from);
  }

  inline SlicePacket& operator=(const SlicePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlicePacket& operator=(SlicePacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SlicePacket& default_instance();

  static inline const SlicePacket* internal_default_instance() {
    return reinterpret_cast<const SlicePacket*>(
               &_SlicePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SlicePacket& a, SlicePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(SlicePacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlicePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlicePacket* New() const final {
    return CreateMaybeMessage<SlicePacket>(nullptr);
  }

  SlicePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlicePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SlicePacket& from);
  void MergeFrom(const SlicePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlicePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Virtual_Tt_Api.SlicePacket";
  }
  protected:
  explicit SlicePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kChunkIdFieldNumber = 2,
    kSliceIdFieldNumber = 3,
    kSliceSizeFieldNumber = 4,
  };
  // .Virtual_Tt_Api.PacketHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Virtual_Tt_Api::PacketHeader& header() const;
  ::Virtual_Tt_Api::PacketHeader* release_header();
  ::Virtual_Tt_Api::PacketHeader* mutable_header();
  void set_allocated_header(::Virtual_Tt_Api::PacketHeader* header);
  private:
  const ::Virtual_Tt_Api::PacketHeader& _internal_header() const;
  ::Virtual_Tt_Api::PacketHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Virtual_Tt_Api::PacketHeader* header);
  ::Virtual_Tt_Api::PacketHeader* unsafe_arena_release_header();

  // uint32 chunkId = 2;
  void clear_chunkid();
  ::PROTOBUF_NAMESPACE_ID::uint32 chunkid() const;
  void set_chunkid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chunkid() const;
  void _internal_set_chunkid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sliceId = 3;
  void clear_sliceid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sliceid() const;
  void set_sliceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sliceid() const;
  void _internal_set_sliceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sliceSize = 4;
  void clear_slicesize();
  ::PROTOBUF_NAMESPACE_ID::uint32 slicesize() const;
  void set_slicesize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slicesize() const;
  void _internal_set_slicesize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Virtual_Tt_Api.SlicePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Virtual_Tt_Api::PacketHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chunkid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sliceid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slicesize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class ChatMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Virtual_Tt_Api.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatMessage& default_instance();

  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatMessage* New() const final {
    return CreateMaybeMessage<ChatMessage>(nullptr);
  }

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Virtual_Tt_Api.ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // repeated string message = 1;
  int message_size() const;
  private:
  int _internal_message_size() const;
  public:
  void clear_message();
  const std::string& message(int index) const;
  std::string* mutable_message(int index);
  void set_message(int index, const std::string& value);
  void set_message(int index, std::string&& value);
  void set_message(int index, const char* value);
  void set_message(int index, const char* value, size_t size);
  std::string* add_message();
  void add_message(const std::string& value);
  void add_message(std::string&& value);
  void add_message(const char* value);
  void add_message(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& message() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_message();
  private:
  const std::string& _internal_message(int index) const;
  std::string* _internal_add_message();
  public:

  // @@protoc_insertion_point(class_scope:Virtual_Tt_Api.ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class ConnectionHandling PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Virtual_Tt_Api.ConnectionHandling) */ {
 public:
  inline ConnectionHandling() : ConnectionHandling(nullptr) {}
  virtual ~ConnectionHandling();

  ConnectionHandling(const ConnectionHandling& from);
  ConnectionHandling(ConnectionHandling&& from) noexcept
    : ConnectionHandling() {
    *this = ::std::move(from);
  }

  inline ConnectionHandling& operator=(const ConnectionHandling& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionHandling& operator=(ConnectionHandling&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionHandling& default_instance();

  static inline const ConnectionHandling* internal_default_instance() {
    return reinterpret_cast<const ConnectionHandling*>(
               &_ConnectionHandling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConnectionHandling& a, ConnectionHandling& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionHandling* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionHandling* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectionHandling* New() const final {
    return CreateMaybeMessage<ConnectionHandling>(nullptr);
  }

  ConnectionHandling* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionHandling>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionHandling& from);
  void MergeFrom(const ConnectionHandling& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionHandling* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Virtual_Tt_Api.ConnectionHandling";
  }
  protected:
  explicit ConnectionHandling(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionFieldNumber = 1,
  };
  // uint32 connection = 1;
  void clear_connection();
  ::PROTOBUF_NAMESPACE_ID::uint32 connection() const;
  void set_connection(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_connection() const;
  void _internal_set_connection(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Virtual_Tt_Api.ConnectionHandling)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 connection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Virtual_Tt_Api.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Virtual_Tt_Api.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionXFieldNumber = 1,
    kPositionYFieldNumber = 2,
    kPositionZFieldNumber = 3,
  };
  // uint32 positionX = 1;
  void clear_positionx();
  ::PROTOBUF_NAMESPACE_ID::uint32 positionx() const;
  void set_positionx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_positionx() const;
  void _internal_set_positionx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 positionY = 2;
  void clear_positiony();
  ::PROTOBUF_NAMESPACE_ID::uint32 positiony() const;
  void set_positiony(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_positiony() const;
  void _internal_set_positiony(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 positionZ = 3;
  void clear_positionz();
  ::PROTOBUF_NAMESPACE_ID::uint32 positionz() const;
  void set_positionz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_positionz() const;
  void _internal_set_positionz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Virtual_Tt_Api.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 positionx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 positiony_;
  ::PROTOBUF_NAMESPACE_ID::uint32 positionz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PacketHeader

// uint32 crc32 = 1;
inline void PacketHeader::clear_crc32() {
  crc32_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::_internal_crc32() const {
  return crc32_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::crc32() const {
  // @@protoc_insertion_point(field_get:Virtual_Tt_Api.PacketHeader.crc32)
  return _internal_crc32();
}
inline void PacketHeader::_internal_set_crc32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  crc32_ = value;
}
inline void PacketHeader::set_crc32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crc32(value);
  // @@protoc_insertion_point(field_set:Virtual_Tt_Api.PacketHeader.crc32)
}

// uint32 sequence = 2;
inline void PacketHeader::clear_sequence() {
  sequence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::sequence() const {
  // @@protoc_insertion_point(field_get:Virtual_Tt_Api.PacketHeader.sequence)
  return _internal_sequence();
}
inline void PacketHeader::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_ = value;
}
inline void PacketHeader::set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:Virtual_Tt_Api.PacketHeader.sequence)
}

// uint32 packetType = 3;
inline void PacketHeader::clear_packettype() {
  packettype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::_internal_packettype() const {
  return packettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketHeader::packettype() const {
  // @@protoc_insertion_point(field_get:Virtual_Tt_Api.PacketHeader.packetType)
  return _internal_packettype();
}
inline void PacketHeader::_internal_set_packettype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  packettype_ = value;
}
inline void PacketHeader::set_packettype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packettype(value);
  // @@protoc_insertion_point(field_set:Virtual_Tt_Api.PacketHeader.packetType)
}

// -------------------------------------------------------------------

// FragmentPacket

// .Virtual_Tt_Api.PacketHeader header = 1;
inline bool FragmentPacket::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool FragmentPacket::has_header() const {
  return _internal_has_header();
}
inline void FragmentPacket::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Virtual_Tt_Api::PacketHeader& FragmentPacket::_internal_header() const {
  const ::Virtual_Tt_Api::PacketHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Virtual_Tt_Api::PacketHeader&>(
      ::Virtual_Tt_Api::_PacketHeader_default_instance_);
}
inline const ::Virtual_Tt_Api::PacketHeader& FragmentPacket::header() const {
  // @@protoc_insertion_point(field_get:Virtual_Tt_Api.FragmentPacket.header)
  return _internal_header();
}
inline void FragmentPacket::unsafe_arena_set_allocated_header(
    ::Virtual_Tt_Api::PacketHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Virtual_Tt_Api.FragmentPacket.header)
}
inline ::Virtual_Tt_Api::PacketHeader* FragmentPacket::release_header() {
  
  ::Virtual_Tt_Api::PacketHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Virtual_Tt_Api::PacketHeader* FragmentPacket::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:Virtual_Tt_Api.FragmentPacket.header)
  
  ::Virtual_Tt_Api::PacketHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Virtual_Tt_Api::PacketHeader* FragmentPacket::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Virtual_Tt_Api::PacketHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::Virtual_Tt_Api::PacketHeader* FragmentPacket::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Virtual_Tt_Api.FragmentPacket.header)
  return _internal_mutable_header();
}
inline void FragmentPacket::set_allocated_header(::Virtual_Tt_Api::PacketHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Virtual_Tt_Api.FragmentPacket.header)
}

// uint32 fragmentId = 2;
inline void FragmentPacket::clear_fragmentid() {
  fragmentid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FragmentPacket::_internal_fragmentid() const {
  return fragmentid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FragmentPacket::fragmentid() const {
  // @@protoc_insertion_point(field_get:Virtual_Tt_Api.FragmentPacket.fragmentId)
  return _internal_fragmentid();
}
inline void FragmentPacket::_internal_set_fragmentid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fragmentid_ = value;
}
inline void FragmentPacket::set_fragmentid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fragmentid(value);
  // @@protoc_insertion_point(field_set:Virtual_Tt_Api.FragmentPacket.fragmentId)
}

// uint32 fragmentAmount = 3;
inline void FragmentPacket::clear_fragmentamount() {
  fragmentamount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FragmentPacket::_internal_fragmentamount() const {
  return fragmentamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FragmentPacket::fragmentamount() const {
  // @@protoc_insertion_point(field_get:Virtual_Tt_Api.FragmentPacket.fragmentAmount)
  return _internal_fragmentamount();
}
inline void FragmentPacket::_internal_set_fragmentamount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fragmentamount_ = value;
}
inline void FragmentPacket::set_fragmentamount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fragmentamount(value);
  // @@protoc_insertion_point(field_set:Virtual_Tt_Api.FragmentPacket.fragmentAmount)
}

// -------------------------------------------------------------------

// SlicePacket

// .Virtual_Tt_Api.PacketHeader header = 1;
inline bool SlicePacket::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SlicePacket::has_header() const {
  return _internal_has_header();
}
inline void SlicePacket::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Virtual_Tt_Api::PacketHeader& SlicePacket::_internal_header() const {
  const ::Virtual_Tt_Api::PacketHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Virtual_Tt_Api::PacketHeader&>(
      ::Virtual_Tt_Api::_PacketHeader_default_instance_);
}
inline const ::Virtual_Tt_Api::PacketHeader& SlicePacket::header() const {
  // @@protoc_insertion_point(field_get:Virtual_Tt_Api.SlicePacket.header)
  return _internal_header();
}
inline void SlicePacket::unsafe_arena_set_allocated_header(
    ::Virtual_Tt_Api::PacketHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Virtual_Tt_Api.SlicePacket.header)
}
inline ::Virtual_Tt_Api::PacketHeader* SlicePacket::release_header() {
  
  ::Virtual_Tt_Api::PacketHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Virtual_Tt_Api::PacketHeader* SlicePacket::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:Virtual_Tt_Api.SlicePacket.header)
  
  ::Virtual_Tt_Api::PacketHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Virtual_Tt_Api::PacketHeader* SlicePacket::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Virtual_Tt_Api::PacketHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::Virtual_Tt_Api::PacketHeader* SlicePacket::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Virtual_Tt_Api.SlicePacket.header)
  return _internal_mutable_header();
}
inline void SlicePacket::set_allocated_header(::Virtual_Tt_Api::PacketHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Virtual_Tt_Api.SlicePacket.header)
}

// uint32 chunkId = 2;
inline void SlicePacket::clear_chunkid() {
  chunkid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlicePacket::_internal_chunkid() const {
  return chunkid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlicePacket::chunkid() const {
  // @@protoc_insertion_point(field_get:Virtual_Tt_Api.SlicePacket.chunkId)
  return _internal_chunkid();
}
inline void SlicePacket::_internal_set_chunkid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chunkid_ = value;
}
inline void SlicePacket::set_chunkid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chunkid(value);
  // @@protoc_insertion_point(field_set:Virtual_Tt_Api.SlicePacket.chunkId)
}

// uint32 sliceId = 3;
inline void SlicePacket::clear_sliceid() {
  sliceid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlicePacket::_internal_sliceid() const {
  return sliceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlicePacket::sliceid() const {
  // @@protoc_insertion_point(field_get:Virtual_Tt_Api.SlicePacket.sliceId)
  return _internal_sliceid();
}
inline void SlicePacket::_internal_set_sliceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sliceid_ = value;
}
inline void SlicePacket::set_sliceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sliceid(value);
  // @@protoc_insertion_point(field_set:Virtual_Tt_Api.SlicePacket.sliceId)
}

// uint32 sliceSize = 4;
inline void SlicePacket::clear_slicesize() {
  slicesize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlicePacket::_internal_slicesize() const {
  return slicesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SlicePacket::slicesize() const {
  // @@protoc_insertion_point(field_get:Virtual_Tt_Api.SlicePacket.sliceSize)
  return _internal_slicesize();
}
inline void SlicePacket::_internal_set_slicesize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  slicesize_ = value;
}
inline void SlicePacket::set_slicesize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slicesize(value);
  // @@protoc_insertion_point(field_set:Virtual_Tt_Api.SlicePacket.sliceSize)
}

// -------------------------------------------------------------------

// ChatMessage

// repeated string message = 1;
inline int ChatMessage::_internal_message_size() const {
  return message_.size();
}
inline int ChatMessage::message_size() const {
  return _internal_message_size();
}
inline void ChatMessage::clear_message() {
  message_.Clear();
}
inline std::string* ChatMessage::add_message() {
  // @@protoc_insertion_point(field_add_mutable:Virtual_Tt_Api.ChatMessage.message)
  return _internal_add_message();
}
inline const std::string& ChatMessage::_internal_message(int index) const {
  return message_.Get(index);
}
inline const std::string& ChatMessage::message(int index) const {
  // @@protoc_insertion_point(field_get:Virtual_Tt_Api.ChatMessage.message)
  return _internal_message(index);
}
inline std::string* ChatMessage::mutable_message(int index) {
  // @@protoc_insertion_point(field_mutable:Virtual_Tt_Api.ChatMessage.message)
  return message_.Mutable(index);
}
inline void ChatMessage::set_message(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Virtual_Tt_Api.ChatMessage.message)
  message_.Mutable(index)->assign(value);
}
inline void ChatMessage::set_message(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Virtual_Tt_Api.ChatMessage.message)
  message_.Mutable(index)->assign(std::move(value));
}
inline void ChatMessage::set_message(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  message_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Virtual_Tt_Api.ChatMessage.message)
}
inline void ChatMessage::set_message(int index, const char* value, size_t size) {
  message_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Virtual_Tt_Api.ChatMessage.message)
}
inline std::string* ChatMessage::_internal_add_message() {
  return message_.Add();
}
inline void ChatMessage::add_message(const std::string& value) {
  message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Virtual_Tt_Api.ChatMessage.message)
}
inline void ChatMessage::add_message(std::string&& value) {
  message_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Virtual_Tt_Api.ChatMessage.message)
}
inline void ChatMessage::add_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Virtual_Tt_Api.ChatMessage.message)
}
inline void ChatMessage::add_message(const char* value, size_t size) {
  message_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Virtual_Tt_Api.ChatMessage.message)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChatMessage::message() const {
  // @@protoc_insertion_point(field_list:Virtual_Tt_Api.ChatMessage.message)
  return message_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChatMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable_list:Virtual_Tt_Api.ChatMessage.message)
  return &message_;
}

// -------------------------------------------------------------------

// ConnectionHandling

// uint32 connection = 1;
inline void ConnectionHandling::clear_connection() {
  connection_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConnectionHandling::_internal_connection() const {
  return connection_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConnectionHandling::connection() const {
  // @@protoc_insertion_point(field_get:Virtual_Tt_Api.ConnectionHandling.connection)
  return _internal_connection();
}
inline void ConnectionHandling::_internal_set_connection(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  connection_ = value;
}
inline void ConnectionHandling::set_connection(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_connection(value);
  // @@protoc_insertion_point(field_set:Virtual_Tt_Api.ConnectionHandling.connection)
}

// -------------------------------------------------------------------

// Position

// uint32 positionX = 1;
inline void Position::clear_positionx() {
  positionx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Position::_internal_positionx() const {
  return positionx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Position::positionx() const {
  // @@protoc_insertion_point(field_get:Virtual_Tt_Api.Position.positionX)
  return _internal_positionx();
}
inline void Position::_internal_set_positionx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  positionx_ = value;
}
inline void Position::set_positionx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_positionx(value);
  // @@protoc_insertion_point(field_set:Virtual_Tt_Api.Position.positionX)
}

// uint32 positionY = 2;
inline void Position::clear_positiony() {
  positiony_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Position::_internal_positiony() const {
  return positiony_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Position::positiony() const {
  // @@protoc_insertion_point(field_get:Virtual_Tt_Api.Position.positionY)
  return _internal_positiony();
}
inline void Position::_internal_set_positiony(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  positiony_ = value;
}
inline void Position::set_positiony(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_positiony(value);
  // @@protoc_insertion_point(field_set:Virtual_Tt_Api.Position.positionY)
}

// uint32 positionZ = 3;
inline void Position::clear_positionz() {
  positionz_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Position::_internal_positionz() const {
  return positionz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Position::positionz() const {
  // @@protoc_insertion_point(field_get:Virtual_Tt_Api.Position.positionZ)
  return _internal_positionz();
}
inline void Position::_internal_set_positionz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  positionz_ = value;
}
inline void Position::set_positionz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_positionz(value);
  // @@protoc_insertion_point(field_set:Virtual_Tt_Api.Position.positionZ)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Virtual_Tt_Api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
